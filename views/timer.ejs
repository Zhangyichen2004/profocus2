<!-- views/timer.ejs -->
<%- include('partials/header') %>

<div class="row">
    <div class="col-md-6 mx-auto">
    <div class="card">
    <div class="card-header">
    <h3 class="text-center mb-0">Pomodoro Timer</h3>
</div>
<div class="card-body text-center">
    <div class="timer-display my-4">
        <h1 id="time-display" class="display-1">25:00</h1>
        <p id="status-text" class="lead">Ready to start</p>
    </div>

    <div class="timer-controls mb-4">
        <button id="start-btn" class="btn btn-primary btn-lg me-2">Start</button>
        <button id="pause-btn" class="btn btn-warning btn-lg me-2" disabled>Pause</button>
        <button id="reset-btn" class="btn btn-danger btn-lg">Reset</button>
    </div>

    <div class="timer-settings mb-4">
        <div class="row g-3">
            <div class="col-md-6">
                <label for="work-minutes" class="form-label">Work Time (minutes)</label>
                <input type="number" class="form-control" id="work-minutes" value="25" min="1" max="60">
            </div>
            <div class="col-md-6">
                <label for="break-minutes" class="form-label">Break Time (minutes)</label>
                <input type="number" class="form-control" id="break-minutes" value="5" min="1" max="30">
            </div>
        </div>
    </div>

    <div class="goal-selection mb-3">
        <label for="goal-select" class="form-label">Select a goal to work on (optional)</label>
        <select class="form-select" id="goal-select">
            <option value="">-- No goal selected --</option>
            <% goals.forEach(goal => { %>
            <option value="<%= goal.id %>"><%= goal.title %></option>
            <% }); %>
        </select>
    </div>
</div>
</div>
</div>
</div>

<div class="row mt-4">
    <div class="col-md-6 mx-auto">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Today's Sessions</h5>
            </div>
            <div class="card-body">
                <div id="sessions-container">
                    <p>Complete a Pomodoro session to see it here.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Pomodoro Timer
    const timeDisplay = document.getElementById('time-display');
    const statusText = document.getElementById('status-text');
    const startBtn = document.getElementById('start-btn');
    const pauseBtn = document.getElementById('pause-btn');
    const resetBtn = document.getElementById('reset-btn');
    const workMinutesInput = document.getElementById('work-minutes');
    const breakMinutesInput = document.getElementById('break-minutes');
    const goalSelect = document.getElementById('goal-select');
    const sessionsContainer = document.getElementById('sessions-container');

    let timer;
    let timeLeft;
    let isRunning = false;
    let isPaused = false;
    let isWorkTime = true;
    let workMinutes = 25;
    let breakMinutes = 5;
    let sessionsCompleted = 0;
    let startTime;
    let sessions = [];

    // Initialize timer
    function initTimer() {
    workMinutes = parseInt(workMinutesInput.value);
    breakMinutes = parseInt(breakMinutesInput.value);
    timeLeft = workMinutes * 60;
    updateDisplay();
}

    // Update timer display
    function updateDisplay() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    timeDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

    // Start timer
    function startTimer() {
    if (!isRunning) {
    startTime = new Date();
    isRunning = true;
    isPaused = false;
    statusText.textContent = isWorkTime ? 'Work Time' : 'Break Time';

    startBtn.disabled = true;
    pauseBtn.disabled = false;
    workMinutesInput.disabled = true;
    breakMinutesInput.disabled = true;

    timer = setInterval(() => {
    timeLeft--;
    updateDisplay();

    if (timeLeft <= 0) {
    clearInterval(timer);
    completeSession();
}
}, 1000);
}
}

    // Pause timer
    function pauseTimer() {
    if (isRunning && !isPaused) {
    clearInterval(timer);
    isPaused = true;
    statusText.textContent = 'Paused';
    startBtn.disabled = false;
    pauseBtn.disabled = true;
}
}

    // Reset timer
    function resetTimer() {
    clearInterval(timer);
    isRunning = false;
    isPaused = false;
    isWorkTime = true;
    statusText.textContent = 'Ready to start';

    startBtn.disabled = false;
    pauseBtn.disabled = true;
    workMinutesInput.disabled = false;
    breakMinutesInput.disabled = false;

    initTimer();
}

    // Complete session
    function completeSession() {
    const endTime = new Date();

    if (isWorkTime) {
    // Work session completed
    sessionsCompleted++;
    const goalId = goalSelect.value || null;
    const session = {
    startTime,
    endTime,
    duration: Math.floor((endTime - startTime) / 1000),
    isWorkSession: true,
    goalId
};

    sessions.push(session);
    saveSession(session);
    updateSessionsDisplay();

    // Switch to break time
    playSound();
    isWorkTime = false;
    timeLeft = breakMinutes * 60;
    statusText.textContent = 'Break Time';
    startTimer();
} else {
    // Break session completed
    playSound();
    isWorkTime = true;
    timeLeft = workMinutes * 60;
    isRunning = false;
    statusText.textContent = 'Ready to start';

    startBtn.disabled = false;
    pauseBtn.disabled = true;
    workMinutesInput.disabled = false;
    breakMinutesInput.disabled = false;

    updateDisplay();
}
}

    // Play notification sound
    function playSound() {
    const audio = new Audio('/audio/bell.mp3');
    audio.play();
}

    // Save session to database
    function saveSession(session) {
    fetch('/goals/pomodoro', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            goalId: session.goalId,
            startTime: session.startTime.toISOString(),
            endTime: session.endTime.toISOString(),
            completed: true
        })
    })
        .then(response => response.json())
        .catch(error => console.error('Error saving session:', error));
}

    // Update sessions display
    function updateSessionsDisplay() {
    if (sessions.length === 0) {
    sessionsContainer.innerHTML = '<p>Complete a Pomodoro session to see it here.</p>';
    return;
}

    let html = '<ul class="list-group">';

    sessions.forEach((session, index) => {
    const duration = Math.floor(session.duration / 60);
    const goalText = session.goalId ? `Working on: ${goalSelect.options[goalSelect.selectedIndex].text}` : 'No goal selected';

    html += `
        <li class="list-group-item">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <strong>Session ${index + 1}</strong> - ${duration} minutes
              <div class="text-muted small">${goalText}</div>
            </div>
            <span class="badge bg-success">Completed</span>
          </div>
        </li>
      `;
});

    html += '</ul>';
    sessionsContainer.innerHTML = html;
}

    // Event listeners
    startBtn.addEventListener('click', startTimer);
    pauseBtn.addEventListener('click', pauseTimer);
    resetBtn.addEventListener('click', resetTimer);
    workMinutesInput.addEventListener('change', initTimer);
    breakMinutesInput.addEventListener('change', initTimer);

    // Initialize on page load
    initTimer();
</script>

<%- include('partials/footer') %>